library(roxygen2)
load_all()
load_all()
.libPaths("C:\\1\\R")
library(roxygen2)
library(ActisoftR)
install.packages("testthat")
library(testthat)
install.packages("testthat")
library(testthat)
library('roxygen2')
.libPaths('C:\\1\\R')
library(devtools)
load_all()
documentation()
build_vignettes()
libPaths('C:\\1\\R')
libPath('C:\\1\\R')
.libPaths('C:\\1\\R')
library(devtools)
library(testthat)
load_all()
?roxygen2
remove.packages(roxygen2)
remove.packages('roxygen2')
install.packages("roxygen2")
library(roxygen2)
library(ActisoftR)
devtools::use_vignette("ActisoftR")
devtools::build_vignette("ActisoftR")
apropos('vignette')
vignette("ActisoftR")
build_vignettes("ActisoftR")
library(devtools)
build_vignettes("ActisoftR")
build_vignettes()
install.packages("plotly")
library(plotly)
build_vignettes()
.libPaths('C:\\1\\R')
library(devtools)
build_vignettes()
library(ActisoftR)
install.packages("rcmdcheck")
roxygen2::roxygenise()
roxygen2::roxygenise()
load_all()
library(ActisoftR)
build_vignettes()
library(devtools)
.libPaths('C\\1\\R')
library(devtools)
library(devtools)
.libPaths('C\\1\\R')
.libPaths()
.libPaths('C:\\1\\R')
library(devtools)
.libPaths()
install.packages("devtools")
library(devtools)
library(ActisoftR)
library(ActisoftR)
build_vignettes()
devtools::install_github("r-lib/devtools")
library(devtools)
session_info()
devtools::document()
devtools::document(roclets=c('rd', 'collate', 'namespace'))
build()
build()
remove.packages('devtools')
library(devtools)
.libPaths()
.libPaths('C:\\1\\R')
sessionInfo()
install.packages("devtools")
library(devtools)
library(devtools)
.libPaths
.libPaths()
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("backports")
library(devtools)
load_all()
document()
test()
test_coverage()
install()
check()
install.packages("callr")
check()
.libPaths()
.libPaths('C:\\1\\R')
library(devtools)
check()
library(ggplot2)
install.packages("ggplot2")
install.packages(c("scales", "plotly"))
check()
library(ggplot2)
install.packages("colorspace")
library(ggplot2)
library(scales)
library(plotly)
check()
build_manual()
?build()
build(pkg = ".", path = 'C:\\1')
.libPaths('C:\\1\\R6')
library(tidyverse)
library(devtools)
install.packages('bindrcpp', dependencies = T)
library(ActisoftR)
par_point <- data.frame(subject_ID = c(1,1),
time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
"2017-12-07 00:00:00 UTC")))
report_point(period = par_point, acti_data = act)
par_point
load_all()
load_all()
library(ActisoftR)
par_point <- data.frame(subject_ID = c(1,1),
+                        time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
par_point <- data.frame(subject_ID = c(1,1),
time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
"2017-12-07 00:00:00 UTC")))
par_point
.libPaths('C:\\1\\R6')
library(dplyr)
library(ggplot2)
library(devtools)
load_all()
library(ActisoftR)
.libPaths('C:\\1\\R6')
library(devtools)
document()
library(ActisoftR)
library(lubridate)
par_point <- data.frame(subject_ID = c(1,1),
time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
"2017-12-07 00:00:00 UTC")))
par_point
act
class(act)
report_point(period = par_point, acti_data = act)
period = par_point
acti_data = act
tz = "UTC"
with_tz <- subject_ID <- interval_type <- datime_end <- po <- NULL
period <- with_tz(period, tz = tz)
particip <- as.vector(t(distinct(period, subject_ID)))
library(ggplot2)
library(dplyr)
library(scales)
library(tibble)
library(lubridate)
library(data.table)
library(magrittr)
library(methods)
library(RColorBrewer)
library(tidyr)
library(roxygen2)
library(plotly)
library(bindrcpp)
with_tz <- subject_ID <- interval_type <- datime_end <- po <- NULL
period <- with_tz(period, tz = tz)
particip <- as.vector(t(distinct(period, subject_ID)))
acti_data$datime_start <- lubridate::ymd_hms(acti_data$datime_start)
acti_data
acti_data$datime_start
acti_data$datime_start
acti_data$datime_end   <- lubridate::ymd_hms(acti_data$datime_end)
acti_data <- with_tz(acti_data, tz = tz)
bypart <- dplyr::filter(acti_data, subject_ID %in% particip,
interval_type %in% c("REST", "SLEEP", "EXCLUDED", "FORCED SLEEP", "FORCED WAKE", "CUSTOM"))
bypart <- tibble::as_tibble(bypart)
colName <- c("Actisoft_ID",	"period_number",	"time_since_up", "time_awake",	"last_rest_end",	"last_sleep_end",	"with_excluded_bad",
"with_forced_wake",	"with_forced_sleep",	"with_custom_interval", "point_overlap_sleep",	"point_overlap_bed")
report <- data.frame(matrix(vector(), nrow=1, length(colName), dimnames = list(c(), colName)), stringsAsFactors = F)
report$last_rest_end <- as.POSIXct((report$last_rest_end))
report$last_sleep_end <- as.POSIXct((report$last_sleep_end))
y <- 1
report1 <- report2 <- NULL
for (ii in 1 : length(particip)){
tab1 <- dplyr::filter(bypart, subject_ID == particip[ii])
tab2 <- dplyr::filter(period, subject_ID == particip[ii])
for (jj in 1 : nrow(tab2)){
mat0 <- dplyr::filter(tab1, datime_end <= tab2$time_point_datime[jj])
mat  <- dplyr::filter(mat0, interval_type %in% c("REST", "SLEEP"))
tab1_sec <- portion_withoverlaps (mat0, from = tab2$time_point_datime[jj] - lubridate::hours(48) ,  to = tab2$time_point_datime[jj] )
matex <- dplyr::filter(tab1_sec, interval_type %in% c("REST", "EXCLUDED"))
matex[matex$interval_type == "EXCLUDED",]$duration <- difftime(matex[matex$interval_type == "EXCLUDED",]$datime_end, matex[matex$interval_type == "EXCLUDED",]$datime_start, units = "mins")
ex <- matex[matex$interval_type == "EXCLUDED",]
last_int <- ifelse(nrow(matex) > 0, as.character(matex[which(matex$datime_end == max(matex$datime_end)),]$interval_type), "null")
mat <- tibble::as_tibble(mat)
mat2 <- mat %>%
group_by(interval_type) %>%
summarise(datime_end  = max(datime_end)
)
matex2 <- matex %>%
group_by(interval_type) %>%
summarise(datime_end  = max(datime_end)
)
mat3 <- dplyr::filter(tab1, as.Date(datime_end) < as.Date(tab2$time_point_datime[jj]) + 1)
mat3$po <- ifelse(mat3$datime_end >= tab2$time_point_datime[jj],ifelse(mat3$datime_start <= tab2$time_point_datime[jj], TRUE , FALSE) , FALSE)
mat4 <- mat3 %>%
group_by(interval_type) %>%
summarise(
point_overlap = ifelse(any(po) == TRUE, TRUE, FALSE)
)
report$Actisoft_ID <- y
report$period_number <- jj
report$time_since_up <- ifelse(nrow(matex) > 0, difftime(tab2$time_point_datime[jj] , max(matex2$datime_end), units = "mins"), NA)
report$time_awake <- ifelse(nrow(matex) > 0, ifelse(last_int == "REST", difftime(tab2$time_point_datime[jj] , mat2$datime_end[2], units = "mins" ), NA), NA)
report$last_rest_end <- as.POSIXct(ifelse(nrow(matex) > 0, max(matex2$datime_end), NA), origin = "1970-01-01", tz = tz)
report$last_sleep_end <- mat2$datime_end[2]
report$point_overlap_bed <- mat4$point_overlap[1]
report$point_overlap_sleep <- mat4$point_overlap[2]
report$with_excluded_bad <- FALSE
if(sum(tab1_sec$bad, na.rm = TRUE) > 0){
report$with_excluded_bad <- TRUE
}
mat3p <- dplyr::filter(mat3, interval_type %in% c("REST", "SLEEP")) #,
rem = FALSE
if(last_int == "EXCLUDED"){
rem = TRUE
}
if(rem == TRUE){ # For Actiwatch, removing sleep period with Excluded
report$with_excluded_bad <- TRUE}
report$with_forced_sleep <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "FORCED SLEEP",]) > 0, TRUE, FALSE)
report$with_forced_wake <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "FORCED WAKE",]) > 0, TRUE, FALSE)
report$with_custom_interval <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "CUSTOM",]) > 0, TRUE, FALSE)
report1 <- cbind(tab2[jj,], report)
report2 <- rbind(report1, report2)
y <- y +  1
}
}
rlang::last_trace()
ii
jj
mat0 <- dplyr::filter(tab1, datime_end <= tab2$time_point_datime[jj])
mat  <- dplyr::filter(mat0, interval_type %in% c("REST", "SLEEP"))
tab1_sec <- portion_withoverlaps (mat0, from = tab2$time_point_datime[jj] - lubridate::hours(48) ,  to = tab2$time_point_datime[jj] )
matex <- dplyr::filter(tab1_sec, interval_type %in% c("REST", "EXCLUDED"))
matex[matex$interval_type == "EXCLUDED",]$duration <- difftime(matex[matex$interval_type == "EXCLUDED",]$datime_end, matex[matex$interval_type == "EXCLUDED",]$datime_start, units = "mins")
class(matex$datime_end)
class(matex$datime_start)
dim9matex
dim(matex)
matex
matex
matex$datime_start
matex$datime_end
mat0 <- dplyr::filter(tab1, datime_end <= tab2$time_point_datime[jj])
mat  <- dplyr::filter(mat0, interval_type %in% c("REST", "SLEEP"))
tab1_sec <- portion_withoverlaps (mat0, from = tab2$time_point_datime[jj] - lubridate::hours(48) ,  to = tab2$time_point_datime[jj] )
matex <- dplyr::filter(tab1_sec, interval_type %in% c("REST", "EXCLUDED"))
matex[matex$interval_type == "EXCLUDED",]$duration <- difftime(matex[matex$interval_type == "EXCLUDED",]$datime_end, matex[matex$interval_type == "EXCLUDED",]$datime_start, units = "mins")
unique(matex$interval_type) %in% "EXCLUDED"
if( (unique(matex$interval_type) %in% "EXCLUDED" ) == TRUE) { #ESF
matex[matex$interval_type == "EXCLUDED",]$duration <- difftime(matex[matex$interval_type == "EXCLUDED",]$datime_end, matex[matex$interval_type == "EXCLUDED",]$datime_start, units = "mins")
} #ESF
ex <- matex[matex$interval_type == "EXCLUDED",]
last_int <- ifelse(nrow(matex) > 0, as.character(matex[which(matex$datime_end == max(matex$datime_end)),]$interval_type), "null")
mat <- tibble::as_tibble(mat)
mat2 <- mat %>%
group_by(interval_type) %>%
summarise(datime_end  = max(datime_end)
)
matex2 <- matex %>%
group_by(interval_type) %>%
summarise(datime_end  = max(datime_end)
)
mat3 <- dplyr::filter(tab1, as.Date(datime_end) < as.Date(tab2$time_point_datime[jj]) + 1)
mat3$po <- ifelse(mat3$datime_end >= tab2$time_point_datime[jj],ifelse(mat3$datime_start <= tab2$time_point_datime[jj], TRUE , FALSE) , FALSE)
mat4 <- mat3 %>%
group_by(interval_type) %>%
summarise(
point_overlap = ifelse(any(po) == TRUE, TRUE, FALSE)
)
report$Actisoft_ID <- y
report$period_number <- jj
report$time_since_up <- ifelse(nrow(matex) > 0, difftime(tab2$time_point_datime[jj] , max(matex2$datime_end), units = "mins"), NA)
report$time_awake <- ifelse(nrow(matex) > 0, ifelse(last_int == "REST", difftime(tab2$time_point_datime[jj] , mat2$datime_end[2], units = "mins" ), NA), NA)
report$last_rest_end <- as.POSIXct(ifelse(nrow(matex) > 0, max(matex2$datime_end), NA), origin = "1970-01-01", tz = tz)
report$last_sleep_end <- mat2$datime_end[2]
report$point_overlap_bed <- mat4$point_overlap[1]
report$point_overlap_sleep <- mat4$point_overlap[2]
report$with_excluded_bad <- FALSE
if(sum(tab1_sec$bad, na.rm = TRUE) > 0){
report$with_excluded_bad <- TRUE
}
mat3p <- dplyr::filter(mat3, interval_type %in% c("REST", "SLEEP")) #,
rem = FALSE
if(last_int == "EXCLUDED"){
rem = TRUE
}
if(rem == TRUE){ # For Actiwatch, removing sleep period with Excluded
report$with_excluded_bad <- TRUE}
report$with_forced_sleep <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "FORCED SLEEP",]) > 0, TRUE, FALSE)
report$with_forced_wake <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "FORCED WAKE",]) > 0, TRUE, FALSE)
report$with_custom_interval <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "CUSTOM",]) > 0, TRUE, FALSE)
report1 <- cbind(tab2[jj,], report)
report2 <- rbind(report1, report2)
y <- y +  1
report_point <- function(period, acti_data, tz = "UTC",...){
with_tz <- subject_ID <- interval_type <- datime_end <- po <- NULL
period <- with_tz(period, tz = tz)
particip <- as.vector(t(distinct(period, subject_ID)))
acti_data$datime_start <- lubridate::ymd_hms(acti_data$datime_start)
acti_data$datime_end   <- lubridate::ymd_hms(acti_data$datime_end)
acti_data <- with_tz(acti_data, tz = tz)
bypart <- dplyr::filter(acti_data, subject_ID %in% particip,
interval_type %in% c("REST", "SLEEP", "EXCLUDED", "FORCED SLEEP", "FORCED WAKE", "CUSTOM"))
bypart <- tibble::as_tibble(bypart)
colName <- c("Actisoft_ID",	"period_number",	"time_since_up", "time_awake",	"last_rest_end",	"last_sleep_end",	"with_excluded_bad",
"with_forced_wake",	"with_forced_sleep",	"with_custom_interval", "point_overlap_sleep",	"point_overlap_bed")
report <- data.frame(matrix(vector(), nrow=1, length(colName), dimnames = list(c(), colName)), stringsAsFactors = F)
report$last_rest_end <- as.POSIXct((report$last_rest_end))
report$last_sleep_end <- as.POSIXct((report$last_sleep_end))
y <- 1
report1 <- report2 <- NULL
for (ii in 1 : length(particip)){
tab1 <- dplyr::filter(bypart, subject_ID == particip[ii])
tab2 <- dplyr::filter(period, subject_ID == particip[ii])
for (jj in 1 : nrow(tab2)){
mat0 <- dplyr::filter(tab1, datime_end <= tab2$time_point_datime[jj])
mat  <- dplyr::filter(mat0, interval_type %in% c("REST", "SLEEP"))
tab1_sec <- portion_withoverlaps (mat0, from = tab2$time_point_datime[jj] - lubridate::hours(48) ,  to = tab2$time_point_datime[jj] )
matex <- dplyr::filter(tab1_sec, interval_type %in% c("REST", "EXCLUDED"))
if( (unique(matex$interval_type) %in% "EXCLUDED" ) == TRUE) { #ESF
matex[matex$interval_type == "EXCLUDED",]$duration <- difftime(matex[matex$interval_type == "EXCLUDED",]$datime_end, matex[matex$interval_type == "EXCLUDED",]$datime_start, units = "mins")
} #ESF
ex <- matex[matex$interval_type == "EXCLUDED",]
last_int <- ifelse(nrow(matex) > 0, as.character(matex[which(matex$datime_end == max(matex$datime_end)),]$interval_type), "null")
mat <- tibble::as_tibble(mat)
mat2 <- mat %>%
group_by(interval_type) %>%
summarise(datime_end  = max(datime_end)
)
matex2 <- matex %>%
group_by(interval_type) %>%
summarise(datime_end  = max(datime_end)
)
mat3 <- dplyr::filter(tab1, as.Date(datime_end) < as.Date(tab2$time_point_datime[jj]) + 1)
mat3$po <- ifelse(mat3$datime_end >= tab2$time_point_datime[jj],ifelse(mat3$datime_start <= tab2$time_point_datime[jj], TRUE , FALSE) , FALSE)
mat4 <- mat3 %>%
group_by(interval_type) %>%
summarise(
point_overlap = ifelse(any(po) == TRUE, TRUE, FALSE)
)
report$Actisoft_ID <- y
report$period_number <- jj
report$time_since_up <- ifelse(nrow(matex) > 0, difftime(tab2$time_point_datime[jj] , max(matex2$datime_end), units = "mins"), NA)
report$time_awake <- ifelse(nrow(matex) > 0, ifelse(last_int == "REST", difftime(tab2$time_point_datime[jj] , mat2$datime_end[2], units = "mins" ), NA), NA)
report$last_rest_end <- as.POSIXct(ifelse(nrow(matex) > 0, max(matex2$datime_end), NA), origin = "1970-01-01", tz = tz)
report$last_sleep_end <- mat2$datime_end[2]
report$point_overlap_bed <- mat4$point_overlap[1]
report$point_overlap_sleep <- mat4$point_overlap[2]
report$with_excluded_bad <- FALSE
if(sum(tab1_sec$bad, na.rm = TRUE) > 0){
report$with_excluded_bad <- TRUE
}
mat3p <- dplyr::filter(mat3, interval_type %in% c("REST", "SLEEP")) #,
rem = FALSE
if(last_int == "EXCLUDED"){
rem = TRUE
}
if(rem == TRUE){ # For Actiwatch, removing sleep period with Excluded
report$with_excluded_bad <- TRUE}
report$with_forced_sleep <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "FORCED SLEEP",]) > 0, TRUE, FALSE)
report$with_forced_wake <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "FORCED WAKE",]) > 0, TRUE, FALSE)
report$with_custom_interval <- ifelse(nrow(tab1_sec[tab1_sec$interval_type == "CUSTOM",]) > 0, TRUE, FALSE)
report1 <- cbind(tab2[jj,], report)
report2 <- rbind(report1, report2)
y <- y +  1
}
}
tibble::as_tibble(report2)
}
par_point <- data.frame(subject_ID = c(1,1),
time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
"2017-12-07 00:00:00 UTC")))
report_point(period = par_point, acti_data = act)
rp <- report_point(period = par_point, acti_data = act)
View(rp)
library(ActisoftR)
par_point
data("act")
par <- data.frame(
subject_ID = 1,
summary_duration_h = 24,
summary_type = "sequential",
summary_start_datime = ymd_hms("2017-12-05 00:00:00 UTC"),
summary_end_datime = ymd_hms("2017-12-15 00:00:00 UTC")
)
rpe <- report_period(period = par , acti_data = act)
View(rpe)
load_all()
load_all()
document()
library(ActisoftR)
load_all()
document()
library(ActisoftR)
library(ActisoftR)
load_all()
library(ActisoftR)
load_all()
library(ActisoftR)
load_all()
library(ActisoftR)
70*20
par_point <- data.frame(subject_ID = c(1,1),
time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
"2017-12-07 00:00:00 UTC")))
.libPaths('C:\\1\\R')
.libPaths('C:\\1\\R6')
library(ggplot2)
library(devtools)
library(lubridate)
par_point <- data.frame(subject_ID = c(1,1),
time_point_datime = ymd_hms(c("2017-12-06 00:00:00 UTC",
"2017-12-07 00:00:00 UTC")))
tbl_df(par_point)
as_tibble(par_point)
library(tibble)
as_tibble(par_point)
tbl_df(par_point)
load_all()
library(ActisoftR)
getwd()
# List all .R files in the ./R/ directory
r_files <- list.files(path = "./R", pattern = "\\.R$", full.names = TRUE)
# Initialize a list to store the results
imported_functions <- list()
r_files
list.files(path = ".//R", pattern = "\\.R", full.names = TRUE)
ls
ls()
getwd()
list.files()
list.files('.//R')
r_files <- list.files('.//R')
# Initialize a list to store the results
imported_functions <- list()
# Loop through each file
for (file in r_files) {
# Read the file content
lines <- readLines(file)
# Find lines containing @importFrom
import_lines <- grep("@importFrom", lines, value = TRUE)
# If there are import lines, store them in the list
if (length(import_lines) > 0) {
imported_functions[[file]] <- import_lines
}
}
# Loop through each file
for (file in r_files) {
# Read the file content
lines <- readLines(paste0( './/R//',file) )
# Find lines containing @importFrom
import_lines <- grep("@importFrom", lines, value = TRUE)
# If there are import lines, store them in the list
if (length(import_lines) > 0) {
imported_functions[[file]] <- import_lines
}
}
# Print the results
imported_functions
?select_
load_all()
library(ActisoftR)
?all_of
load_all()
library(ActisoftR)
.libPaths('C:\\1\\R6')
library(devtools)
load_all()
library(ActisoftR)
library(ActisoftR)
citation()
citation('ActisoftR')
.libPaths('C:\\1\\R6')
library(devtools)
load_all()
data("act")
View(act)
.libPaths('C:\\1\\R6')
library(devtools)
load_all()
document()
.libPaths('C:\\1\\R6')
library(devtools)
load_all()
document()
library(ActisoftR)
library(rhub)
rhub::check_for_cran()
.libPaths('C:\\1\\R6')
library(devtools)
load_all()
library(ActisoftR)
.libPaths('C:\\1\\R6')
library(devtools)
load_all()
library(ActisoftR)
library(devtools)
load_all()
library(ActisoftR)
